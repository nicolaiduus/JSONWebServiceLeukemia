#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JSONWebServiceLeukemia
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="leukemiadb")]
	public partial class LeukemiaDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBloodsampledata(Bloodsampledata instance);
    partial void UpdateBloodsampledata(Bloodsampledata instance);
    partial void DeleteBloodsampledata(Bloodsampledata instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPaindata(Paindata instance);
    partial void UpdatePaindata(Paindata instance);
    partial void DeletePaindata(Paindata instance);
    partial void InsertMedicinedata(Medicinedata instance);
    partial void UpdateMedicinedata(Medicinedata instance);
    partial void DeleteMedicinedata(Medicinedata instance);
    partial void InsertDiarydata(Diarydata instance);
    partial void UpdateDiarydata(Diarydata instance);
    partial void DeleteDiarydata(Diarydata instance);
    #endregion
		
		public LeukemiaDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["leukemiadbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LeukemiaDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeukemiaDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeukemiaDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LeukemiaDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bloodsampledata> Bloodsampledatas
		{
			get
			{
				return this.GetTable<Bloodsampledata>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Paindata> Paindatas
		{
			get
			{
				return this.GetTable<Paindata>();
			}
		}
		
		public System.Data.Linq.Table<Medicinedata> Medicinedatas
		{
			get
			{
				return this.GetTable<Medicinedata>();
			}
		}
		
		public System.Data.Linq.Table<Diarydata> Diarydatas
		{
			get
			{
				return this.GetTable<Diarydata>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.bloodsampledata")]
	public partial class Bloodsampledata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bloodsampleid;
		
		private System.Nullable<int> _alat;
		
		private System.Nullable<int> _thrombocytes;
		
		private System.Nullable<int> _hemoglobin;
		
		private System.Nullable<int> _neutrofile;
		
		private System.Nullable<int> _crp;
		
		private System.Nullable<int> _other;
		
		private System.Nullable<int> _leukocytes;
		
		private EntitySet<Medicinedata> _Medicinedatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbloodsampleidChanging(int value);
    partial void OnbloodsampleidChanged();
    partial void OnalatChanging(System.Nullable<int> value);
    partial void OnalatChanged();
    partial void OnthrombocytesChanging(System.Nullable<int> value);
    partial void OnthrombocytesChanged();
    partial void OnhemoglobinChanging(System.Nullable<int> value);
    partial void OnhemoglobinChanged();
    partial void OnneutrofileChanging(System.Nullable<int> value);
    partial void OnneutrofileChanged();
    partial void OncrpChanging(System.Nullable<int> value);
    partial void OncrpChanged();
    partial void OnotherChanging(System.Nullable<int> value);
    partial void OnotherChanged();
    partial void OnleukocytesChanging(System.Nullable<int> value);
    partial void OnleukocytesChanged();
    #endregion
		
		public Bloodsampledata()
		{
			this._Medicinedatas = new EntitySet<Medicinedata>(new Action<Medicinedata>(this.attach_Medicinedatas), new Action<Medicinedata>(this.detach_Medicinedatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bloodsampleid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bloodsampleid
		{
			get
			{
				return this._bloodsampleid;
			}
			set
			{
				if ((this._bloodsampleid != value))
				{
					this.OnbloodsampleidChanging(value);
					this.SendPropertyChanging();
					this._bloodsampleid = value;
					this.SendPropertyChanged("bloodsampleid");
					this.OnbloodsampleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alat", DbType="Int")]
		public System.Nullable<int> alat
		{
			get
			{
				return this._alat;
			}
			set
			{
				if ((this._alat != value))
				{
					this.OnalatChanging(value);
					this.SendPropertyChanging();
					this._alat = value;
					this.SendPropertyChanged("alat");
					this.OnalatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thrombocytes", DbType="Int")]
		public System.Nullable<int> thrombocytes
		{
			get
			{
				return this._thrombocytes;
			}
			set
			{
				if ((this._thrombocytes != value))
				{
					this.OnthrombocytesChanging(value);
					this.SendPropertyChanging();
					this._thrombocytes = value;
					this.SendPropertyChanged("thrombocytes");
					this.OnthrombocytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hemoglobin", DbType="Int")]
		public System.Nullable<int> hemoglobin
		{
			get
			{
				return this._hemoglobin;
			}
			set
			{
				if ((this._hemoglobin != value))
				{
					this.OnhemoglobinChanging(value);
					this.SendPropertyChanging();
					this._hemoglobin = value;
					this.SendPropertyChanged("hemoglobin");
					this.OnhemoglobinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_neutrofile", DbType="Int")]
		public System.Nullable<int> neutrofile
		{
			get
			{
				return this._neutrofile;
			}
			set
			{
				if ((this._neutrofile != value))
				{
					this.OnneutrofileChanging(value);
					this.SendPropertyChanging();
					this._neutrofile = value;
					this.SendPropertyChanged("neutrofile");
					this.OnneutrofileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_crp", DbType="Int")]
		public System.Nullable<int> crp
		{
			get
			{
				return this._crp;
			}
			set
			{
				if ((this._crp != value))
				{
					this.OncrpChanging(value);
					this.SendPropertyChanging();
					this._crp = value;
					this.SendPropertyChanged("crp");
					this.OncrpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_other", DbType="Int")]
		public System.Nullable<int> other
		{
			get
			{
				return this._other;
			}
			set
			{
				if ((this._other != value))
				{
					this.OnotherChanging(value);
					this.SendPropertyChanging();
					this._other = value;
					this.SendPropertyChanged("other");
					this.OnotherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_leukocytes", DbType="Int")]
		public System.Nullable<int> leukocytes
		{
			get
			{
				return this._leukocytes;
			}
			set
			{
				if ((this._leukocytes != value))
				{
					this.OnleukocytesChanging(value);
					this.SendPropertyChanging();
					this._leukocytes = value;
					this.SendPropertyChanged("leukocytes");
					this.OnleukocytesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bloodsampledata_Medicinedata", Storage="_Medicinedatas", ThisKey="bloodsampleid", OtherKey="bloodsampleid")]
		public EntitySet<Medicinedata> Medicinedatas
		{
			get
			{
				return this._Medicinedatas;
			}
			set
			{
				this._Medicinedatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicinedatas(Medicinedata entity)
		{
			this.SendPropertyChanging();
			entity.Bloodsampledata = this;
		}
		
		private void detach_Medicinedatas(Medicinedata entity)
		{
			this.SendPropertyChanging();
			entity.Bloodsampledata = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _patientid;
		
		private EntitySet<Paindata> _Paindatas;
		
		private EntitySet<Medicinedata> _Medicinedatas;
		
		private EntitySet<Diarydata> _Diarydatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpatientidChanging(string value);
    partial void OnpatientidChanged();
    #endregion
		
		public Patient()
		{
			this._Paindatas = new EntitySet<Paindata>(new Action<Paindata>(this.attach_Paindatas), new Action<Paindata>(this.detach_Paindatas));
			this._Medicinedatas = new EntitySet<Medicinedata>(new Action<Medicinedata>(this.attach_Medicinedatas), new Action<Medicinedata>(this.detach_Medicinedatas));
			this._Diarydatas = new EntitySet<Diarydata>(new Action<Diarydata>(this.attach_Diarydatas), new Action<Diarydata>(this.detach_Diarydatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientid", DbType="VarChar(65) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string patientid
		{
			get
			{
				return this._patientid;
			}
			set
			{
				if ((this._patientid != value))
				{
					this.OnpatientidChanging(value);
					this.SendPropertyChanging();
					this._patientid = value;
					this.SendPropertyChanged("patientid");
					this.OnpatientidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Paindata", Storage="_Paindatas", ThisKey="patientid", OtherKey="patientid")]
		public EntitySet<Paindata> Paindatas
		{
			get
			{
				return this._Paindatas;
			}
			set
			{
				this._Paindatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Medicinedata", Storage="_Medicinedatas", ThisKey="patientid", OtherKey="patientid")]
		public EntitySet<Medicinedata> Medicinedatas
		{
			get
			{
				return this._Medicinedatas;
			}
			set
			{
				this._Medicinedatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_diarydata", Storage="_Diarydatas", ThisKey="patientid", OtherKey="patientid")]
		public EntitySet<Diarydata> Diarydatas
		{
			get
			{
				return this._Diarydatas;
			}
			set
			{
				this._Diarydatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paindatas(Paindata entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Paindatas(Paindata entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Medicinedatas(Medicinedata entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Medicinedatas(Medicinedata entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Diarydatas(Diarydata entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Diarydatas(Diarydata entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.paindata")]
	public partial class Paindata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private System.Nullable<bool> _paracetamol;
		
		private System.Nullable<int> _morphinelevel;
		
		private string _morphineunit;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<int> _painlevel;
		
		private string _paintype;
		
		private string _patientid;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnparacetamolChanging(System.Nullable<bool> value);
    partial void OnparacetamolChanged();
    partial void OnmorphinelevelChanging(System.Nullable<int> value);
    partial void OnmorphinelevelChanged();
    partial void OnmorphineunitChanging(string value);
    partial void OnmorphineunitChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnpainlevelChanging(System.Nullable<int> value);
    partial void OnpainlevelChanged();
    partial void OnpaintypeChanging(string value);
    partial void OnpaintypeChanged();
    partial void OnpatientidChanging(string value);
    partial void OnpatientidChanged();
    #endregion
		
		public Paindata()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(65) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paracetamol", DbType="Bit")]
		public System.Nullable<bool> paracetamol
		{
			get
			{
				return this._paracetamol;
			}
			set
			{
				if ((this._paracetamol != value))
				{
					this.OnparacetamolChanging(value);
					this.SendPropertyChanging();
					this._paracetamol = value;
					this.SendPropertyChanged("paracetamol");
					this.OnparacetamolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_morphinelevel", DbType="Int")]
		public System.Nullable<int> morphinelevel
		{
			get
			{
				return this._morphinelevel;
			}
			set
			{
				if ((this._morphinelevel != value))
				{
					this.OnmorphinelevelChanging(value);
					this.SendPropertyChanging();
					this._morphinelevel = value;
					this.SendPropertyChanged("morphinelevel");
					this.OnmorphinelevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_morphineunit", DbType="VarChar(10)")]
		public string morphineunit
		{
			get
			{
				return this._morphineunit;
			}
			set
			{
				if ((this._morphineunit != value))
				{
					this.OnmorphineunitChanging(value);
					this.SendPropertyChanging();
					this._morphineunit = value;
					this.SendPropertyChanged("morphineunit");
					this.OnmorphineunitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_painlevel", DbType="Int")]
		public System.Nullable<int> painlevel
		{
			get
			{
				return this._painlevel;
			}
			set
			{
				if ((this._painlevel != value))
				{
					this.OnpainlevelChanging(value);
					this.SendPropertyChanging();
					this._painlevel = value;
					this.SendPropertyChanged("painlevel");
					this.OnpainlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paintype", DbType="VarChar(10)")]
		public string paintype
		{
			get
			{
				return this._paintype;
			}
			set
			{
				if ((this._paintype != value))
				{
					this.OnpaintypeChanging(value);
					this.SendPropertyChanging();
					this._paintype = value;
					this.SendPropertyChanged("paintype");
					this.OnpaintypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientid", DbType="VarChar(65) NOT NULL", CanBeNull=false)]
		public string patientid
		{
			get
			{
				return this._patientid;
			}
			set
			{
				if ((this._patientid != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientidChanging(value);
					this.SendPropertyChanging();
					this._patientid = value;
					this.SendPropertyChanged("patientid");
					this.OnpatientidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Paindata", Storage="_Patient", ThisKey="patientid", OtherKey="patientid", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Paindatas.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Paindatas.Add(this);
						this._patientid = value.patientid;
					}
					else
					{
						this._patientid = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.medicinedata")]
	public partial class Medicinedata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private System.Nullable<int> _mtx;
		
		private System.Nullable<System.DateTime> _date;
		
		private System.Nullable<int> _mercaptopurin;
		
		private string _kemotreatment;
		
		private int _bloodsampleid;
		
		private string _patientid;
		
		private EntityRef<Bloodsampledata> _Bloodsampledata;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnmtxChanging(System.Nullable<int> value);
    partial void OnmtxChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnmercaptopurinChanging(System.Nullable<int> value);
    partial void OnmercaptopurinChanged();
    partial void OnkemotreatmentChanging(string value);
    partial void OnkemotreatmentChanged();
    partial void OnbloodsampleidChanging(int value);
    partial void OnbloodsampleidChanged();
    partial void OnpatientidChanging(string value);
    partial void OnpatientidChanged();
    #endregion
		
		public Medicinedata()
		{
			this._Bloodsampledata = default(EntityRef<Bloodsampledata>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(65) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mtx", DbType="Int")]
		public System.Nullable<int> mtx
		{
			get
			{
				return this._mtx;
			}
			set
			{
				if ((this._mtx != value))
				{
					this.OnmtxChanging(value);
					this.SendPropertyChanging();
					this._mtx = value;
					this.SendPropertyChanged("mtx");
					this.OnmtxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mercaptopurin", DbType="Int")]
		public System.Nullable<int> mercaptopurin
		{
			get
			{
				return this._mercaptopurin;
			}
			set
			{
				if ((this._mercaptopurin != value))
				{
					this.OnmercaptopurinChanging(value);
					this.SendPropertyChanging();
					this._mercaptopurin = value;
					this.SendPropertyChanged("mercaptopurin");
					this.OnmercaptopurinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kemotreatment", DbType="VarChar(25)")]
		public string kemotreatment
		{
			get
			{
				return this._kemotreatment;
			}
			set
			{
				if ((this._kemotreatment != value))
				{
					this.OnkemotreatmentChanging(value);
					this.SendPropertyChanging();
					this._kemotreatment = value;
					this.SendPropertyChanged("kemotreatment");
					this.OnkemotreatmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bloodsampleid", DbType="Int NOT NULL")]
		public int bloodsampleid
		{
			get
			{
				return this._bloodsampleid;
			}
			set
			{
				if ((this._bloodsampleid != value))
				{
					if (this._Bloodsampledata.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbloodsampleidChanging(value);
					this.SendPropertyChanging();
					this._bloodsampleid = value;
					this.SendPropertyChanged("bloodsampleid");
					this.OnbloodsampleidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientid", DbType="VarChar(65) NOT NULL", CanBeNull=false)]
		public string patientid
		{
			get
			{
				return this._patientid;
			}
			set
			{
				if ((this._patientid != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientidChanging(value);
					this.SendPropertyChanging();
					this._patientid = value;
					this.SendPropertyChanged("patientid");
					this.OnpatientidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bloodsampledata_Medicinedata", Storage="_Bloodsampledata", ThisKey="bloodsampleid", OtherKey="bloodsampleid", IsForeignKey=true)]
		public Bloodsampledata Bloodsampledata
		{
			get
			{
				return this._Bloodsampledata.Entity;
			}
			set
			{
				Bloodsampledata previousValue = this._Bloodsampledata.Entity;
				if (((previousValue != value) 
							|| (this._Bloodsampledata.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bloodsampledata.Entity = null;
						previousValue.Medicinedatas.Remove(this);
					}
					this._Bloodsampledata.Entity = value;
					if ((value != null))
					{
						value.Medicinedatas.Add(this);
						this._bloodsampleid = value.bloodsampleid;
					}
					else
					{
						this._bloodsampleid = default(int);
					}
					this.SendPropertyChanged("Bloodsampledata");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Medicinedata", Storage="_Patient", ThisKey="patientid", OtherKey="patientid", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Medicinedatas.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Medicinedatas.Add(this);
						this._patientid = value.patientid;
					}
					else
					{
						this._patientid = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.diarydata")]
	public partial class Diarydata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private System.Nullable<int> _protocoltreatmentday;
		
		private System.Nullable<float> _weight;
		
		private string _notes;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _patientid;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnprotocoltreatmentdayChanging(System.Nullable<int> value);
    partial void OnprotocoltreatmentdayChanged();
    partial void OnweightChanging(System.Nullable<float> value);
    partial void OnweightChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OnpatientidChanging(string value);
    partial void OnpatientidChanged();
    #endregion
		
		public Diarydata()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(65) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_protocoltreatmentday", DbType="Int")]
		public System.Nullable<int> protocoltreatmentday
		{
			get
			{
				return this._protocoltreatmentday;
			}
			set
			{
				if ((this._protocoltreatmentday != value))
				{
					this.OnprotocoltreatmentdayChanging(value);
					this.SendPropertyChanging();
					this._protocoltreatmentday = value;
					this.SendPropertyChanged("protocoltreatmentday");
					this.OnprotocoltreatmentdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Real")]
		public System.Nullable<float> weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_patientid", DbType="VarChar(65) NOT NULL", CanBeNull=false)]
		public string patientid
		{
			get
			{
				return this._patientid;
			}
			set
			{
				if ((this._patientid != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpatientidChanging(value);
					this.SendPropertyChanging();
					this._patientid = value;
					this.SendPropertyChanged("patientid");
					this.OnpatientidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_diarydata", Storage="_Patient", ThisKey="patientid", OtherKey="patientid", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Diarydatas.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Diarydatas.Add(this);
						this._patientid = value.patientid;
					}
					else
					{
						this._patientid = default(string);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
